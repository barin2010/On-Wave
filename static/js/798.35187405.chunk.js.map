{"version":3,"file":"static/js/798.35187405.chunk.js","mappings":"gMAOwBA,E,mBCNxB,EAA8B,iCAA9B,EAAiF,qCAAjF,EAA8H,2BAA9H,EAAuK,iCAAvK,EAA2N,sCAA3N,EAAmR,qCAAnR,EAA0U,qCAA1U,EAAwX,4B,mBDKlXC,EAAS,CAAC,GACQD,EAMtBE,EAAAA,OALEC,OAAOC,SAAQ,SAAAC,GACfJ,EAAOI,EAAIC,QAAQ,KAAM,KAAON,EAAEK,EACpC,IAMF,IAAME,EAAe,SAAAC,GACnB,OAAOP,EAAOO,EAChB,EA0CA,EAxCoB,WAClB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,EAAOC,EAAAA,MAAe,SAAAD,GAAI,OAAIA,EAAKE,KAAOJ,CAAM,IAEtD,OAAKE,GAKHG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAC9BH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWE,UACxBC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAAA,MAAAG,SAAKN,EAAKQ,QACVL,EAAAA,EAAAA,KAAA,OACEM,OAAM,GAAAC,OAAKd,EAAaI,EAAKV,OAAO,OAAM,SAAAoB,OAAQd,EAChDI,EAAKV,OAAO,OACb,SAAAoB,OAAQd,EAAaI,EAAKV,OAAO,OAAM,OACxCqB,IAAKf,EAAaI,EAAKV,OAAO,OAC9BsB,IAAKZ,EAAKQ,KACVK,MAAM,MACNC,OAAO,SAETX,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAUC,SAAEN,EAAKe,SAC/BR,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAgBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAqBC,SAAC,qBACpCH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAoBC,SAChCN,EAAKgB,gBAAgBC,KAAI,SAAAC,GAAc,OACtCf,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAoBC,SAChCY,IADsCC,EAAAA,EAAAA,MAEpC,OAGThB,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAWC,SAAC,mBA3BhCH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,kBAiCd,C,uDE1DO,IAAMc,EACX,mECmBSD,EAAS,WAGlB,IAHiC,IAAdE,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBpB,EAAK,GACLuB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KACLnB,GAAM2B,EAAgC,GAAdJ,EAAMJ,IAEhC,OAAOnB,CACT,C","sources":["components/ItemDetails/ItemDetails.jsx","webpack://react-homework-template/./src/components/ItemDetails/ItemDetails.module.css?b950","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport css from './ItemDetails.module.css';\nimport itemsData from '../../data/items.json';\n\nconst images = {};\nconst importAllImages = r => {\n  r.keys().forEach(key => {\n    images[key.replace('./', '')] = r(key);\n  });\n};\nimportAllImages(\n  require.context('../../images/arrivals', false, /\\.(png|jpe?g|svg)$/)\n);\n\nconst getImagePath = path => {\n  return images[path];\n};\n\nconst ItemDetails = () => {\n  const { itemId } = useParams();\n  const item = itemsData.find(item => item.id === itemId);\n\n  if (!item) {\n    return <p>Item not found</p>;\n  }\n\n  return (\n    <div className={css.itemDetails}>\n      <div className=\"container\">\n        <div className={css.itemDetailsPage}>\n          <h1>{item.name}</h1>\n          <img\n            srcSet={`${getImagePath(item.images['1x'])} 1x, ${getImagePath(\n              item.images['2x']\n            )} 2x, ${getImagePath(item.images['3x'])} 3x`}\n            src={getImagePath(item.images['1x'])}\n            alt={item.name}\n            width=\"400\"\n            height=\"740\"\n          />\n          <p className={css.price}>{item.price}</p>\n          <div className={css.description}>\n            <p className={css.descriptionTitle}>Characteristics</p>\n            <ul className={css.descriptionList}>\n              {item.characteristics.map(characteristic => (\n                <li className={css.descriptionItem} key={nanoid()}>\n                  {characteristic}\n                </li>\n              ))}\n            </ul>\n            <button className={css.button}>Buy</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ItemDetails;\n","// extracted by mini-css-extract-plugin\nexport default {\"itemDetails\":\"ItemDetails_itemDetails__enIqG\",\"itemDetailsPage\":\"ItemDetails_itemDetailsPage__EII6e\",\"price\":\"ItemDetails_price__PZ4ri\",\"description\":\"ItemDetails_description__mhdjE\",\"descriptionTitle\":\"ItemDetails_descriptionTitle__C8tMn\",\"descriptionList\":\"ItemDetails_descriptionList__69c9S\",\"descriptionItem\":\"ItemDetails_descriptionItem__1318I\",\"button\":\"ItemDetails_button__cOF8s\"};","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["r","images","require","keys","forEach","key","replace","getImagePath","path","itemId","useParams","item","itemsData","id","_jsx","className","css","children","_jsxs","name","srcSet","concat","src","alt","width","height","price","characteristics","map","characteristic","nanoid","urlAlphabet","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet"],"sourceRoot":""}