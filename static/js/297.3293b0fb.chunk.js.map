{"version":3,"file":"static/js/297.3293b0fb.chunk.js","mappings":"gMAMwBA,E,mBCLxB,GAAgB,QAAU,+BAA+B,YAAc,mCAAmC,gBAAkB,uCAAuC,MAAQ,6BAA6B,YAAc,mCAAmC,iBAAmB,wCAAwC,gBAAkB,uCAAuC,gBAAkB,uCAAuC,OAAS,+B,SDIzaC,EAAS,CAAC,GACQD,EAMtBE,EAAAA,OALEC,OAAOC,SAAQ,SAAAC,GACfJ,EAAOI,EAAIC,QAAQ,KAAM,KAAON,EAAEK,EACpC,IAMF,IAAME,EAAe,SAAAC,GACnB,OAAOP,EAAOO,EAChB,EA4CA,EA1CsB,WACpB,IACQC,IADSC,EAAAA,EAAAA,MACYC,OAAS,CAAEF,QAAS,KAAzCA,QAER,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,cAAkBC,UAChCH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,QAAYC,SACzBN,EAAQO,OAAS,EAChBP,EAAQQ,KAAI,SAAAC,GAAI,OACdC,EAAAA,EAAAA,MAAA,OAAKN,UAAWC,EAAAA,gBAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAAA,MAAAG,SAAKG,EAAKE,QACVR,EAAAA,EAAAA,KAAA,OACES,OAAM,GAAAC,OAAKf,EAAaW,EAAKjB,OAAO,OAAM,SAAAqB,OAAQf,EAChDW,EAAKjB,OAAO,OACb,SAAAqB,OAAQf,EAAaW,EAAKjB,OAAO,OAAM,OACxCsB,IAAKhB,EAAaW,EAAKjB,OAAO,OAC9BuB,IAAKN,EAAKE,KACVK,MAAM,MACNC,OAAO,SAETd,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,MAAUC,SAAEG,EAAKS,SAC/BR,EAAAA,EAAAA,MAAA,OAAKN,UAAWC,EAAAA,YAAgBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,iBAAqBC,SAAC,qBACpCH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,gBAAoBC,SAChCG,EAAKU,gBAAgBX,KAAI,SAAAY,GAAc,OACtCjB,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,gBAAoBC,SAChCc,IADsCC,EAAAA,EAAAA,MAEpC,OAGTlB,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAAA,OAAWC,SAAC,aArBOG,EAAKa,GAuBzC,KAGRnB,EAAAA,EAAAA,KAAA,KAAAG,SAAG,sBAKb,C,uDE3DO,IAAMiB,EACX,mECmBSF,EAAS,WAGlB,IAHiC,IAAdG,EAAIC,UAAAlB,OAAA,QAAAmB,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACtBH,EAAK,GACLK,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWN,IAC3CA,KACLF,GAAMS,EAAgC,GAAdJ,EAAMH,IAEhC,OAAOF,CACT,C","sources":["components/SearchResults/SearchResults.jsx","webpack://react-homework-template/./src/components/SearchResults/SearchResults.module.css?b68e","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport css from './SearchResults.module.css';\n\nconst images = {};\nconst importAllImages = r => {\n  r.keys().forEach(key => {\n    images[key.replace('./', '')] = r(key);\n  });\n};\nimportAllImages(\n  require.context('../../images/arrivals', false, /\\.(png|jpe?g|svg)$/)\n);\n\nconst getImagePath = path => {\n  return images[path];\n};\n\nconst SearchResults = () => {\n  const location = useLocation();\n  const { results } = location.state || { results: [] };\n\n  return (\n    <div className={css.searchResults}>\n      <div className={css.wrapper}>\n        {results.length > 0 ? (\n          results.map(item => (\n            <div className={css.itemDetailsPage} key={item.id}>\n              <h1>{item.name}</h1>\n              <img\n                srcSet={`${getImagePath(item.images['1x'])} 1x, ${getImagePath(\n                  item.images['2x']\n                )} 2x, ${getImagePath(item.images['3x'])} 3x`}\n                src={getImagePath(item.images['1x'])}\n                alt={item.name}\n                width=\"400\"\n                height=\"740\"\n              />\n              <p className={css.price}>{item.price}</p>\n              <div className={css.description}>\n                <p className={css.descriptionTitle}>Characteristics</p>\n                <ul className={css.descriptionList}>\n                  {item.characteristics.map(characteristic => (\n                    <li className={css.descriptionItem} key={nanoid()}>\n                      {characteristic}\n                    </li>\n                  ))}\n                </ul>\n                <button className={css.button}>Buy</button>\n              </div>\n            </div>\n          ))\n        ) : (\n          <p>No items found</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchResults_wrapper__LaiQy\",\"itemDetails\":\"SearchResults_itemDetails__OL2zT\",\"itemDetailsPage\":\"SearchResults_itemDetailsPage__R5rac\",\"price\":\"SearchResults_price__KCjZx\",\"description\":\"SearchResults_description__LWuXh\",\"descriptionTitle\":\"SearchResults_descriptionTitle__CFHfI\",\"descriptionList\":\"SearchResults_descriptionList__efUEC\",\"descriptionItem\":\"SearchResults_descriptionItem__3dRXn\",\"button\":\"SearchResults_button__sDSu8\"};","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["r","images","require","keys","forEach","key","replace","getImagePath","path","results","useLocation","state","_jsx","className","css","children","length","map","item","_jsxs","name","srcSet","concat","src","alt","width","height","price","characteristics","characteristic","nanoid","id","urlAlphabet","size","arguments","undefined","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet"],"sourceRoot":""}